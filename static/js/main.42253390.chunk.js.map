{"version":3,"sources":["components/Quotes.js","App.js","index.js"],"names":["QuoteCard","styled","div","Quote","h2","Author","span","Button","button","NewQuoteButton","PreviusQuoteButton","Quotes","quotesList","isLoading","isError","useState","quotes","setQuotes","author","quote","showQuote","setShowQuote","currentId","setCurrentId","useEffect","length","getRandomQuote","getRandomNumber","Math","floor","random","getQuote","newQuote","arr","onClick","key","id","App","setQuoteList","setIsLoading","setIsError","getQuotes","fetch","then","response","json","data","catch","error","console","displayQuotes","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mQAMMA,EAAYC,IAAOC,IAAV,kXAeTC,EAAQF,IAAOG,GAAV,wZAoBLC,EAASJ,IAAOK,KAAV,qHAONC,EAASN,IAAOO,OAAV,8tBAiCNC,EAAiBR,YAAOM,EAAPN,CAAH,iCAGdS,EAAqBT,YAAOM,EAAPN,CAAH,iCAsETU,EAlEA,SAAC,GAAwC,IAAtCC,EAAqC,EAArCA,WAAYC,EAAyB,EAAzBA,UAAWC,EAAc,EAAdA,QACvC,EAA4BC,mBAAS,IAArC,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAAkCF,mBAAS,CAAEG,OAAQ,GAAIC,MAAO,KAAhE,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAkCN,mBAAS,GAA3C,mBAAOO,EAAP,KAAkBC,EAAlB,KAEAC,qBAAU,WACHX,GAA+B,IAAlBG,EAAOS,QACvBC,IAEFH,EAAaP,EAAOS,UACnB,CAACZ,EAAWG,IAEf,IAAMU,EAAiB,WACrB,IAAMC,EAAkBC,KAAKC,MAC3BD,KAAKE,UAAYlB,EAAWa,OAAS,GAAK,GAEtCM,EAAWnB,EAAWe,GACtBK,EAAW,CACfd,OAAQa,EAASb,OACjBC,MAAOY,EAASZ,OAGlBF,GAAU,SAACgB,GAAD,4BAAaA,GAAb,CAAkBF,OAC5BV,EAAaW,IAiBf,OAAIlB,EACK,gEAAyBA,KAG9BD,EACK,wDAIP,gCACE,eAACb,EAAD,WACE,cAACG,EAAD,UACGiB,EAAUD,QAEb,cAACd,EAAD,UACGe,EAAUF,YAGdF,EAAOS,OAAS,EACf,cAACf,EAAD,CAAoBwB,QAjCF,WACtB,IAAK,IAAMC,KAAOnB,EACZmB,GAAOb,EAAY,GACrBD,EAAa,CACXH,OAAQF,EAAOmB,GAAKjB,OACpBC,MAAOH,EAAOmB,GAAKhB,QAIrBG,EAAY,GACdC,GAAa,SAACa,GAAD,OAAQA,EAAK,MAuBxB,4BACE,KACJ,cAAC3B,EAAD,CAAgByB,QAASR,EAAzB,2CCjGSW,MA/Cf,WACE,MAAmCtB,mBAAS,IAA5C,mBAAOH,EAAP,KAAmB0B,EAAnB,KACA,EAAkCvB,oBAAS,GAA3C,mBAAOF,EAAP,KAAkB0B,EAAlB,KACA,EAA8BxB,oBAAS,GAAvC,mBAAOD,EAAP,KAAgB0B,EAAhB,KAEAhB,qBAAU,WACRiB,MACC,IAEH,IAAMA,EAAY,WAGhBC,MADE,yIAECC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACmBlB,KAAKC,MAC3BD,KAAKE,UAAYgB,EAAKrB,OAAS,GAAK,GAEtCa,EAAaQ,GACbP,GAAa,MAEdQ,OAAM,SAACC,GACNC,QAAQD,MAAM,wBAAyBA,GACvCR,EAAWQ,OAIXE,EAAgBrC,EACpB,+CAEA,cAAC,EAAD,CAAQD,WAAYA,EAAYC,UAAWA,EAAWC,QAASA,IAGjE,OACE,sBAAKqC,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,+BACA,iCACE,sBAAKA,UAAU,gBAAf,UACE,mBAAGA,UAAU,UACb,mBAAGA,UAAU,cAEdD,SCxCTE,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.42253390.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport React from \"react\";\r\nimport styled from 'styled-components'\r\n\r\n\r\n\r\nconst QuoteCard = styled.div`\r\n    max-width: 800px;\r\n    margin: 0 auto;\r\n    border: 1px solid #282c34;\r\n    border-radius: 10px;\r\n    padding: 35px 45px;\r\n    margin-bottom: 50px;\r\n    min-height: 320px;\r\n    display: flex;\r\n    background-color: rgba(95, 158, 160, 0.3);\r\n    flex-direction: column;\r\n    justify-content: space-between;\r\n    position: relative;\r\n    \r\n`\r\nconst Quote = styled.h2`\r\n    font-size:28px;\r\n    color:#282c34;\r\n    margin-bottom: 30px;\r\n    text-align: left;\r\n    flex-grow: 1;\r\n    display: flex;\r\n    justify-content: flex-start;\r\n    align-items: center;\r\n    &:before{\r\n        content:\"˶\";\r\n        font-size:100px;\r\n        position: absolute;\r\n        top:0;\r\n        left:10px;\r\n        line-height: 50px;\r\n        opacity: 0.3;\r\n    }\r\n`;\r\n\r\nconst Author = styled.span`\r\n    font-size:20px;\r\n    color:#282c34;\r\n    text-align: right;\r\n    font-style:italic;\r\n`\r\n\r\nconst Button = styled.button`\r\n  background-color: #fff;\r\n  border: 1px solid #d5d9d9;\r\n  border-radius: 8px;\r\n  box-shadow: rgba(213, 217, 217, .5) 0 2px 5px 0;\r\n  box-sizing: border-box;\r\n  color: #0f1111;\r\n  cursor: pointer;\r\n  display: inline-block;\r\n  font-family: \"Amazon Ember\",sans-serif;\r\n  font-size: 13px;\r\n  line-height: 29px;\r\n  padding: 0 10px 0 11px;\r\n  position: relative;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  user-select: none;\r\n  -webkit-user-select: none;\r\n  touch-action: manipulation;\r\n  vertical-align: middle;\r\n  margin: 0px 10px;\r\n  &:hover {\r\n    background-color: #f7fafa;\r\n  }\r\n  &:focus {\r\n    border-color: #008296;\r\n    box-shadow: rgba(213, 217, 217, .5) 0 2px 5px 0;\r\n    outline: 0;\r\n  }\r\n`\r\n\r\n\r\n\r\nconst NewQuoteButton = styled(Button)`\r\n   \r\n`\r\nconst PreviusQuoteButton = styled(Button)`\r\n   \r\n`\r\n\r\nconst Quotes = ({ quotesList, isLoading, isError }) => {\r\n  const [quotes, setQuotes] = useState([]);\r\n  const [showQuote, setShowQuote] = useState({ author: \"\", quote: \"\" });\r\n  const [currentId, setCurrentId] = useState(0);\r\n\r\n  useEffect(() => {\r\n    if (!isLoading && quotes.length === 0) {\r\n      getRandomQuote();\r\n    }\r\n    setCurrentId(quotes.length);\r\n  }, [isLoading, quotes]);\r\n\r\n  const getRandomQuote = () => {\r\n    const getRandomNumber = Math.floor(\r\n      Math.random() * (quotesList.length - 1) + 1\r\n    );\r\n    const getQuote = quotesList[getRandomNumber];\r\n    const newQuote = {\r\n      author: getQuote.author,\r\n      quote: getQuote.quote,\r\n    };\r\n\r\n    setQuotes((arr) => [...arr, getQuote]);\r\n    setShowQuote(newQuote);\r\n  };\r\n\r\n  const getPreviusQuote = () => {\r\n    for (const key in quotes) {\r\n      if (key == currentId - 2) {\r\n        setShowQuote({\r\n          author: quotes[key].author,\r\n          quote: quotes[key].quote,\r\n        });\r\n      }\r\n    }\r\n    if (currentId > 0) {\r\n      setCurrentId((id) => id - 1);\r\n    }\r\n  };\r\n\r\n  if (isError) {\r\n    return <div>Coś poszło nie tak {isError}</div>;\r\n  }\r\n\r\n  if (isLoading) {\r\n    return <div>ładowanie cytatu</div>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <QuoteCard>\r\n        <Quote>\r\n          {showQuote.quote}\r\n        </Quote>\r\n        <Author>\r\n          {showQuote.author}\r\n        </Author>\r\n      </QuoteCard>\r\n      {quotes.length > 1 ? (\r\n        <PreviusQuoteButton onClick={getPreviusQuote}>Porzedni cytat</PreviusQuoteButton>\r\n      ) : null}\r\n      <NewQuoteButton onClick={getRandomQuote}>Losuj następny cytat</NewQuoteButton>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Quotes;\r\n","import { useEffect, useState } from \"react\";\nimport \"./App.css\";\n\nimport Quotes from \"./components/Quotes\";\n\nfunction App() {\n  const [quotesList, setQuoteList] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isError, setIsError] = useState(false);\n\n  useEffect(() => {\n    getQuotes();\n  }, []);\n\n  const getQuotes = () => {\n    const quotesApi =\n      \"https://gist.githubusercontent.com/natebass/b0a548425a73bdf8ea5c618149fe1fce/raw/f4231cd5961f026264bb6bb3a6c41671b044f1f4/quotes.json\";\n    fetch(quotesApi)\n      .then((response) => response.json())\n      .then((data) => {\n        const getRandomNumber = Math.floor(\n          Math.random() * (data.length - 1) + 1\n        );\n        setQuoteList(data);\n        setIsLoading(false);\n      })\n      .catch((error) => {\n        console.error(\"Error fetching data: \", error);\n        setIsError(error);\n      });\n  };\n\n  const displayQuotes = isLoading ? (\n    <p>ładowanie</p>\n  ) : (\n    <Quotes quotesList={quotesList} isLoading={isLoading} isError={isError} />\n  );\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">Zadanie 3 - React</header>\n      <main>\n        <div className=\"quote-wrapper\">\n          <p className=\"quote\"></p>\n          <p className=\"author\"></p>\n        </div>\n        {displayQuotes}\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}